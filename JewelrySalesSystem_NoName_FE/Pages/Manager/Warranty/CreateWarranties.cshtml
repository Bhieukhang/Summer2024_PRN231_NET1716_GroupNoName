@page
@using Newtonsoft.Json
@model JewelrySalesSystem_NoName_FE.Pages.Manager.Warranty.CreateWarrantiesModel
@{
    ViewData["Title"] = "Create Warranty";
}

<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h2>Tạo phiếu bảo hành</h2>
        </div>
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }
        else if (TempData["FailMessage"] != null)
        {
            <div class="alert alert-danger">@TempData["FailMessage"]</div>
        }
        @if (Model.ListOrder != null && Model.ListOrder.Count > 0)
        {
            <div class="card">
                <div class="card-body">
                    <div class="">
                        <h3>Đơn hàng ID: @Model.OrderId</h3>
                    </div>
                    <form id="warrantyForm" method="post" onsubmit="submitForm(event)">
                        <div class="form-group row">
                            <label for="customerPhone" class="col-sm-2 col-form-label">Số điện thoại:</label>
                            <div class="col-sm-2">
                                <input type="text" id="customerPhone" name="CustomerPhone" class="form-control" value="@Model.Phone" required>
                            </div>
                        </div>
                        @foreach (var order in Model.ListOrder)
                        {
                            <div class="form-group row">
                                <div class="col-md-4">
                                    <label class="control-label">Sản phẩm</label>
                                    <input type="text" class="form-control" value="@order.ProductName" readonly />
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Ngày bắt đầu bảo hành<span class="required">*</span></label>
                                    <input type="date" class="form-control" id="DateOfPurchase_@order.ProductId"
                                           onchange="setExpirationMinDate('@order.ProductId')" required />
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Ngày hết hạn<span class="required">*</span></label>
                                    <input type="date" class="form-control" id="ExpirationDate_@order.ProductId" readonly required />
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Thời hạn (tháng)<span class="required">*</span></label>
                                    <input type="number" class="form-control" id="Period_@order.ProductId" value="@order.PeriodWarranty"
                                           onchange="setExpirationDate('@order.ProductId')" required />
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn btn-gradient-secondary mt-4" onclick="loadConditions('@order.ProductId')">Chọn điều kiện</button>
                                </div>
                                <input type="hidden" name="SelectedConditions_@order.ProductId" id="SelectedConditions_@order.ProductId" value="" />
                                <input type="hidden" name="OrderDetailId_@order.ProductId" value="@order.OrderDetailId" />
                            </div>
                        }
                        <div class="form-group row justify-content-end">
                            <div class="col-auto">
                                <a asp-page="./Index" class="btn btn-danger">Hủy</a>
                                <button type="submit" class="btn btn-primary" id="createWarrantyButton" disabled onclick="submitForm(event)">Hoàn tất</button>
                            </div>
                        </div>
                        <input type="hidden" name="SerializedListOrder" value="@Html.Raw(JsonConvert.SerializeObject(Model.ListOrder))" />
                    </form>
                </div>
            </div>
        }
        else
        {
            <div>Không tồn tại sản phẩm bảo hành</div>
        }
    </div>
</div>

<!-- The Modal Condition Warranty-->
<div class="modal fade" id="conditionModal" tabindex="-1" aria-labelledby="conditionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="conditionModalLabel">Chọn điều kiện bảo hành</h5>
                @* <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Chọn</th>
                            <th>Điều kiện</th>
                        </tr>
                    </thead>
                    <tbody id="conditionTableBody">
                        <!-- Data will be populated here by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="saveConditionsButton">Lưu</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const conditions = @Html.Raw(JsonConvert.SerializeObject(Model.ConditionWarranties));
        let selectedConditions = [];
        let selectedProductId = null;
        let selectedConditionsMap = {};

        document.addEventListener('DOMContentLoaded', function () {
            const now = new Date();
            const today = now.toISOString().split('T')[0];

        @foreach (var order in Model.ListOrder)
        {
            <text>
                    (function () {
                        var productId = "@order.ProductId";
                        var dateOfPurchaseElement = document.getElementById(`DateOfPurchase_${productId}`);
                        if (dateOfPurchaseElement) {
                            dateOfPurchaseElement.value = today;
                            dateOfPurchaseElement.setAttribute('min', today);
                            setExpirationMinDate(productId); // Set initial min expiration date
                        }
                    })();
            </text>
        }

                document.getElementById('createWarrantyButton').disabled = true;
            validateForm();

            // Đóng modal khi nhấn vào các nút với data-bs-dismiss="modal"
            document.querySelectorAll('[data-bs-dismiss="modal"]').forEach(button => {
                button.addEventListener('click', function () {
                    const conditionModal = bootstrap.Modal.getInstance(document.getElementById('conditionModal'));
                    if (conditionModal) {
                        conditionModal.hide();
                    }
                });
            });

            document.getElementById('cancelButton').addEventListener('click', function () {
                window.location.href = '/Manager/Warranty/CreateWarranties';
            });
        });

        async function loadConditions(productId) {
            selectedProductId = productId;
            const tableBody = document.getElementById('conditionTableBody');
            tableBody.innerHTML = '';

            const productSelectedConditions = selectedConditionsMap[productId] || [];

            conditions.forEach(condition => {
                const row = document.createElement('tr');
                const isChecked = productSelectedConditions.includes(condition.Id);
                row.innerHTML = `
                            <td><input type="checkbox" class="condition-checkbox" data-id="${condition.Id}" ${isChecked ? 'checked' : ''}></td>
                            <td>${condition.Condition}</td>
                        `;
                tableBody.appendChild(row);
            });

            const conditionModal = new bootstrap.Modal(document.getElementById('conditionModal'));
            conditionModal.show();
        }

        document.getElementById('saveConditionsButton').addEventListener('click', () => {
            const checkboxes = document.querySelectorAll('.condition-checkbox:checked');
            const selectedIds = Array.from(checkboxes).map(checkbox => checkbox.dataset.id);
            selectedConditionsMap[selectedProductId] = selectedIds;

            document.getElementById(`SelectedConditions_${selectedProductId}`).value = JSON.stringify(selectedIds);

            const conditionModal = bootstrap.Modal.getInstance(document.getElementById('conditionModal'));
            conditionModal.hide();

            validateForm();
        });

        function validateForm() {
            const createWarrantyButton = document.getElementById('createWarrantyButton');
            createWarrantyButton.disabled = !Object.keys(selectedConditionsMap).some(productId => selectedConditionsMap[productId].length > 0);
        }

        function getSelectedConditions() {
            const checkboxes = document.querySelectorAll('.condition-checkbox:checked');
            const selectedIds = Array.from(checkboxes).map(checkbox => checkbox.dataset.id);
            return selectedIds;
        }

        function updateCheckboxes() {
            const checkboxes = document.querySelectorAll('.condition-checkbox');
            checkboxes.forEach(checkbox => {
                const conditionId = checkbox.dataset.id;
                checkbox.checked = selectedConditions.includes(conditionId);
            });
        }

        function formatDate(inputDate) {
            const date = new Date(inputDate);
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function addDays(date, days) {
            const result = new Date(date);
            result.setDate(result.getDate() + days);
            return result.toISOString().split('T')[0];
        }

        function setExpirationMinDate(productId) {
            const dateOfPurchaseElement = document.getElementById(`DateOfPurchase_${productId}`);
            const expirationDateElement = document.getElementById(`ExpirationDate_${productId}`);
            const periodElement = document.getElementById(`Period_${productId}`);

            if (dateOfPurchaseElement && expirationDateElement) {
                const dateOfPurchase = dateOfPurchaseElement.value;
                if (dateOfPurchase) {
                    const minExpirationDate = addDays(dateOfPurchase, 10);
                    expirationDateElement.setAttribute('min', minExpirationDate);
                }
                const period = parseInt(periodElement.value);

                if (dateOfPurchase && !isNaN(period)) {
                    const expirationDate = addMonths(dateOfPurchase, period);
                    expirationDateElement.value = expirationDate;
                }
            }
        }
        // function updateExpirationDate(productId) {
        //     setExpirationMinDate(productId);
        // }

        function addMonths(date, months) {
            const result = new Date(date);
            result.setMonth(result.getMonth() + months);
            return result.toISOString().split('T')[0];
        }


        function submitForm(event) {
            event.preventDefault();

            const warranties = [];
            let formValid = true;

        @foreach (var order in Model.ListOrder)
        {
            <text>
                    (function () {
                        var productId = "@order.ProductId";
                        var dateOfPurchaseElement = document.getElementById(`DateOfPurchase_${productId}`);
                        var expirationDateElement = document.getElementById(`ExpirationDate_${productId}`);
                        var periodElement = document.getElementById(`Period_${productId}`);
                        var selectedConditionsElement = document.getElementById(`SelectedConditions_${productId}`);

                        if (dateOfPurchaseElement && expirationDateElement && periodElement && selectedConditionsElement) {
                            var dateOfPurchase = formatDate(dateOfPurchaseElement.value);
                            var expirationDate = formatDate(expirationDateElement.value);
                            var period = periodElement.value;
                            var selectedConditions = selectedConditionsMap[productId] || [];

                            if (!dateOfPurchase || !expirationDate || !period || selectedConditions.length === 0) {
                                formValid = false;
                            } else {
                                var conditionIds = selectedConditions;

                                var warranty = {
                                    dateOfPurchase: dateOfPurchase,
                                    expirationDate: expirationDate,
                                    period: period,
                                    orderDetailId: "@order.OrderDetailId",
                                    conditionMap: conditionIds.map(id => ({ conditionWarrantyId: id }))
                                };

                                warranties.push(warranty);
                            }
                        } else {
                            formValid = false;
                        }
                    })();
            </text>
        }

                    if (formValid) {
                var customerPhone = document.getElementById("customerPhone").value;
                var phoneArray = customerPhone.split(',').map(phone => phone.trim()).filter(phone => phone !== "");
                customerPhone = phoneArray[0]; // Chỉ lấy số điện thoại đầu tiên

                console.log("customerPhone:", customerPhone);
                var hiddenInput = document.createElement("input");
                hiddenInput.type = "hidden";
                hiddenInput.name = "SerializedWarranties";
                hiddenInput.value = JSON.stringify(warranties);

                var hiddenInputPhone = document.createElement("input");
                hiddenInputPhone.type = "hidden";
                hiddenInputPhone.name = "CustomerPhone";
                hiddenInputPhone.value = customerPhone;

                document.querySelector("form#warrantyForm").appendChild(hiddenInput);
                document.querySelector("form#warrantyForm").appendChild(hiddenInputPhone);
                document.querySelector("form#warrantyForm").submit();
            } else {
                alert("Please fill out all required fields.");
            }
        }
    </script>
}

<style>
    .required {
        color: red;
    }
</style>
